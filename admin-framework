
-- setting up framework

local Framework = {}

Framework.Config = {
	Prefix = "/";
	Version = "v1.1.7";

	PrintOnExecution = true;

	SS = game:GetService("RunService"):IsServer()
}

-- setting up engine 

Framework.Engine = {}

function Framework.SecureConnection(connection, index)
	if index then 
		Framework.Engine[index] = connection 
	else 
		table.insert(Framework.Engine, connection)
	end; return connection
end

function Framework.Disconnect(index)
	if index then 
		Framework.Engine[index] = Framework.Engine[index]:Disconnect()
	else 
		for _, c in next, Framework.Engine do 
			c:Disconnect()
		end
	end
end

function Framework:GetConnections()
	return self.Engine
end

-- parsing and getplayer functions 

function Framework.ParseMessage(msg)
	if msg:sub(1, #Framework.Config.Prefix) == Framework.Config.Prefix then
		msg = msg:gsub(Framework.Config.Prefix, ""):lower()
		local Arguments = msg:split(" ")
		local Command = Arguments[1]
		table.remove(Arguments, 1)
		return Command, Arguments
	end
end

function Framework.GetPlayers(sender, str)
	str = str:lower()

	if str == "all" then 
		return game:GetService("Players"):GetPlayers()
	end

	if str == "others" then 
		local others = {}
		for _, x in next, game:GetService("Players"):GetPlayers() do 
			if x ~= sender then 
				table.insert(others, x)
			end
		end; return others	
	end

	if str == "me" then 
		return {sender}
	end

	for _, x in next, game:GetService("Players"):GetPlayers() do 
		if x.Name:sub(1, #str):lower() == str or x.DisplayName:sub(1, #str):lower() == str then 
			return {x}
		end
	end
end

-- setting up commands

Framework.Commands = {}

function Framework.CreateCommand(alias, desc, callback, ssrequired)
	local Alias = alias or {"Alias"}
	local Description = desc or "Description"
	local Callback = callback or function() end
	local SSRequired = ssrequired or false

	table.insert(Framework.Commands, {Alias, Description, Callback, SSRequired})
end

function Framework:GetCommands()
	
	local Commands = {}

	for _, CData in next, Framework.Commands do 
		table.insert(Commands, table.concat(CData[1], "/") .. " : " .. CData[2])
		table.sort(Commands)
	end

	return Commands
end

function Framework:GetCommand(alias)
	for _, cmdData in next, Framework.Commands do 
		if table.find(cmdData[1], alias) then 
			return cmdData
		end
	end; return
end

function Framework:CallCommand(player, alias, args)
	for _, cmdData in next, Framework.Commands do 
		if table.find(cmdData[1], alias) then 
			cmdData[3](player, unpack(args))
			break
		end
	end; return
end

-- command creation 

Framework.CreateCommand({"headless", "nohead"}, "Gives localplayer headless", function(Sender, Argument1)
	local Targets
	
	if Argument1 then 
		Targets = Framework.GetPlayers(Sender, Argument1)
	else 
		Targets = {Sender}
	end
	
	for _, Target in next, Targets do 
		if Target and Target.Character then 
			for _, x in next, Target.Character:GetChildren() do 
				if x.Name == "Head" then 
					x.Transparency = 1
					x.face:Destroy()
				end
			end
		end
	end
end, true)

Framework.CreateCommand({"jumppower", "jp"}, "Changes target's jump power", function(Sender, Argument1, Argument2)
	local Targets 

	if Argument2 then 
		Targets = Framework.GetPlayers(Sender, Argument2)
	else 
		Targets = {Sender}
	end


	local Jumppower = tonumber(Argument1) or 50

	for _, Target in next, Targets do 
		local Character = Target.Character or Target.CharacterAdded:wait()
		local Humanoid = Character:FindFirstChildOfClass("Humanoid")

		Humanoid.JumpPower = Jumppower
	end
end, true)

Framework.CreateCommand({"walkspeed", "ws"}, "Changes target's walk speed", function(Sender, Argument1, Argument2)
	local Targets 

	if Argument2 then 
		Targets = Framework.GetPlayers(Sender, Argument2)
	else 
		Targets = {Sender}
	end


	local Walkspeed = tonumber(Argument1) or 16

	for _, Target in next, Targets do 
		local Character = Target.Character or Target.CharacterAdded:wait()
		local Humanoid = Character:FindFirstChildOfClass("Humanoid")

		Humanoid.WalkSpeed = Walkspeed
	end
end, true)

Framework.CreateCommand({"sit"}, "Forces localplayer to sit", function(Sender, Argument)
	local Targets 

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	else 
		Targets = {Sender}
	end

	if Targets then 
		for _, Target in next, Targets do 
			local Character = Target.Character or Target.CharacterAdded:wait()
			local Humanoid = Character:FindFirstChildOfClass("Humanoid")

			if Humanoid then 
				Humanoid.Sit = true
			end
		end
	end
end, true)

Framework.CreateCommand({"killfling", "kfling", "kf"}, "Kills target then flings them into the sky", function(Sender, Argument)
	local Targets

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	else 
		Targets = {Sender}
	end

	if Targets then 
		for _, Target in next, Targets do 

			local Character = Target.Character or Target.CharacterAdded:wait()
			local Humanoid = Character:FindFirstChildOfClass("Humanoid")
			local RootPart = Humanoid.RootPart

			Humanoid.Health = 0
			Humanoid.Jump = true
			Humanoid.Sit = false

			if RootPart then 
				local BV = Instance.new("BodyVelocity", RootPart)

				BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
				BV.P = math.huge

				BV.Velocity = Vector3.new(math.random(-500, 500), math.random(250, 500), math.random(-500, 500))

				coroutine.wrap(function()
					wait(.5)
					BV:Destroy()
				end)()

			end

		end
	end
end, true)

Framework.CreateCommand({"fling", "f"}, "Flings target into the sky", function(Sender, Argument)
	local Targets

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	else 
		Targets = {Sender}
	end

	if Targets then 
		for _, Target in next, Targets do 

			local Character = Target.Character or Target.CharacterAdded:wait()
			local Humanoid = Character:FindFirstChildOfClass("Humanoid")
			local RootPart = Humanoid.RootPart

			Humanoid.Jump = true

			if RootPart then 
				local BV = Instance.new("BodyVelocity", RootPart)
				local BAV = Instance.new("BodyAngularVelocity", RootPart)

				BAV.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
				BAV.P = math.random(250, 500)

				BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
				BV.P = math.huge

				BV.Velocity = Vector3.new(math.random(-500, 500), math.random(250, 500), math.random(-500, 500))
				BAV.AngularVelocity = Vector3.new(math.random(-500, 500), math.random(250, 500), math.random(-500, 500))	

				coroutine.wrap(function()
					wait(.5)
					BV:Destroy()
					BAV:Destroy()
				end)()

			end

		end
	end
end, true)

Framework.CreateCommand({"noclip", "nc"}, "Toggles noclip for localplayer", function(Sender)

	if Framework.Engine["NoclipConnection"] then
		return Framework.Disconnect("NoclipConnection")
	end

	Framework.SecureConnection(game:GetService("RunService").RenderStepped:Connect(function()
		local Character = Sender.Character or Sender.CharacterAdded:wait()

		for _, x in next, Character:GetChildren() do 
			if x:IsA("BasePart") or x:IsA("MeshPart") or x:IsA("Part") then
				x.CanCollide = false
			end
		end
	end), "NoclipConnection")

end, false)

Framework.CreateCommand({"clip", "unnc"}, "Disables noclip for localplayer", function()
	if Framework.Engine["NoclipConnection"] then
		return Framework.Disconnect("NoclipConnection")
	end
end, false)

Framework.CreateCommand({"reset", "re"}, "Resets target's character", function(Sender, Argument)
	local Targets

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	else 
		Targets = {Sender}
	end

	if Targets then 
		for _, Target in next, Targets do 

			local Character = Target.Character or Target.CharacterAdded:wait()
			local PrimaryPart = Character.PrimaryPart

			if not PrimaryPart then return end

			local ReturnCFrame = PrimaryPart.CFrame

			Target:LoadCharacter()

			local Character = Target.Character or Target.CharacterAdded:wait()
			repeat task.wait() until Character.PrimaryPart

			Character:SetPrimaryPartCFrame(ReturnCFrame)

		end
	end
end, true)

Framework.CreateCommand({"light", "fire", "set"}, "Sets target on fire", function(Sender, Argument)
	local Targets 

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	end

	if Targets then 
		for _, Target in next, Targets do 
			if Target.Character and Target.Character:FindFirstChildWhichIsA("Humanoid") then 

				local Humanoid = Target.Character:FindFirstChildWhichIsA("Humanoid")
				local HumanoidRootPart = Humanoid.RootPart

				local Flame = Instance.new("Fire", HumanoidRootPart)
				Flame.Heat = 150
				Flame.Size = 15

				coroutine.wrap(function()
					for i = Humanoid.Health, 0, -1 do 
						Humanoid.Health = i
						task.wait()
					end
				end)()

			end
		end
	end
end, true)

Framework.CreateCommand({"explode"}, "Explodes a target", function(Sender, Argument)
	local Targets 

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	end

	if Targets then 
		for _, Target in next, Targets do 
			if Target.Character and Target.Character.PrimaryPart then 
				local Explosion = Instance.new("Explosion", workspace)
				Explosion.Position = Target.Character.PrimaryPart.Position
				Explosion.BlastRadius = 10
			end
		end
	end
end, true)

Framework.CreateCommand({"kill"}, "Kills a target", function(Sender, Argument)
	local Targets

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	end

	if Targets then 
		for _, Target in next, Targets do 

			local Character = Target.Character or Target.CharacterAdded:wait()
			local Humanoid = Character:FindFirstChildOfClass("Humanoid")

			if Humanoid then 
				Humanoid.Health = 0
			end

		end
	end
end, true)

Framework.CreateCommand({"bring"}, "Brings a target to you", function(Sender, Argument)
	local Targets

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	end

	if Targets then 
		for Index, Target in ipairs(Targets) do 

			local SenderCharacter = Sender.Character or Sender.CharacterAdded:wait()
			local SenderPart = SenderCharacter.PrimaryPart

			local Character = Target.Character or Target.CharacterAdded:wait()
			local PrimaryPart = Character.PrimaryPart


			for i = 1, 5 do 
				for _, x in next, Character:GetChildren() do 
					if x:IsA("BasePart") or x:IsA("Part") or x:IsA("MeshPart") then 
						x.Velocity = Vector3.new()
						x.RotVelocity = Vector3.new()
					end
				end; task.wait()
			end 

			if PrimaryPart and SenderPart then 
				if (Index % 2 == 0) then 
					Character:SetPrimaryPartCFrame(SenderPart.CFrame * CFrame.new((1 + Index) - 1, 0, 0))
				else 
					Character:SetPrimaryPartCFrame(SenderPart.CFrame * CFrame.new((1 - Index) - 1, 0, 0))
				end 
			end

		end
	end

end, true)

Framework.CreateCommand({"clicktp", "ctp"}, "Toggles click teleport for localplayer", function()
	
	if Framework.Engine["ClickTeleport"] then 
		return Framework.Disconnect("ClickTeleport")
	end
	
	local LocalPlayer = game:GetService("Players").LocalPlayer
	local Mouse = LocalPlayer:GetMouse()
	
	Framework.SecureConnection(Mouse.Button1Down:Connect(function()
		
		local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:wait()
		
		if Character and Character.PrimaryPart then 
			Character:SetPrimaryPartCFrame(CFrame.new(Mouse.Hit.p + Vector3.new(0, 2, 0)))
		end	
		
	end), "ClickTeleport")
	
end, false)

Framework.CreateCommand({"unclicktp", "unctp"}, "Disables click teleport for localplayer", function()
	if Framework.Engine["ClickTeleport"] then 
		return Framework.Disconnect("ClickTeleport")
	end
end, false)

Framework.CreateCommand({"goto", "to"}, "Teleports localplayer to a target", function(Sender, Argument)
	local Targets

	if Argument then 
		Targets = Framework.GetPlayers(Sender, Argument)
	end

	if Targets then 
		for _, Target in next, Targets do 

			local SenderCharacter = Sender.Character or Sender.CharacterAdded:wait()
			local SenderPart = SenderCharacter.PrimaryPart

			local Character = Target.Character or Target.CharacterAdded:wait()
			local PrimaryPart = Character.PrimaryPart

			for i = 1, 5 do 
				for _, x in next, SenderCharacter:GetChildren() do 
					if x:IsA("BasePart") or x:IsA("Part") or x:IsA("MeshPart") then 
						x.Velocity = Vector3.new()
						x.RotVelocity = Vector3.new()
					end
				end; task.wait()
			end 

			if PrimaryPart and SenderPart then 
				SenderCharacter:SetPrimaryPartCFrame(PrimaryPart.CFrame * CFrame.new(4, 0, 0))
			end

		end
	end

end, false)

Framework.CreateCommand({"unview", "unv"}, "Stops spectating target", function(Sender)

	local CurrentCamera = workspace["CurrentCamera"]
	local Character = Sender.Character or Sender.CharacterAdded:wait() 

	if Character and Character:FindFirstChildOfClass("Humanoid") then 
		CurrentCamera.CameraSubject = Character:FindFirstChildOfClass("Humanoid")
	end

end, false)

Framework.CreateCommand({"view", "v"}, "Spectates target", function(Sender, Argument)
	local Target

	if Argument then 
		Target = Framework.GetPlayers(Sender, Argument)[1]
	else 
		Target = false
	end

	local CurrentCamera = workspace["CurrentCamera"]

	if Target then 

		local Character = Target.Character or Target.CharacterAdded:wait()

		if Character and Character:FindFirstChild("Head") then 
			CurrentCamera.CameraSubject = Character:FindFirstChild("Head")
		end

	else 

		local Character = Sender.Character or Sender.CharacterAdded:wait()

		if Character and Character:FindFirstChildOfClass("Humanoid") then
			CurrentCamera.CameraSubject = Character:FindFirstChildOfClass("Humanoid")
		end

	end
end, false)

Framework.CreateCommand({"kick"}, "Kicks target from the server", function(Sender, Player, ...)
	
	local Targets
	
	if Player then 
		Targets = Framework.GetPlayers(Sender, Player)
	end
	
	if Targets then 
		for _, Target in next, Targets do 
			Target:Kick(table.concat({...}, " "))
		end
	end
	
end, true)

if not Framework.Config.SS and Framework.Config.PrintOnExecution then 
	warn("Loaded Sy's Admin " .. Framework.Config.Version)
	warn("Command Prefix : " .. Framework.Config.Prefix)
	warn("Command Count : " .. tostring(#Framework:GetCommands()))
	
	warn(string.rep("-", 50))
	
	for _, x in next, Framework:GetCommands() do 
		warn(x)
	end
end

return Framework
